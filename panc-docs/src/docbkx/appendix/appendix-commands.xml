<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xml:id="appendix-commands"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <title>Command Reference</title>

  <para>The pan distributions provide a set of commands that allow the
  compiler to be invoked and that demonstrate how to analyze available logging
  information. These commands are provided for ease of use for one-off tasks.
  The compiler can be more efficiently invoked via Apache Ant or Maven for
  automated use of the compiler in production.</para>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc</refname>

      <refpurpose>compile pan language templates</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc</command>

        <arg>--no-debug | --debug</arg>

        <arg>--debug-ns-include <replaceable>regex</replaceable></arg>

        <arg>--debug-ns-exclude <replaceable>regex</replaceable></arg>

        <arg>--initial-data <replaceable>nlist-dml</replaceable></arg>

        <arg>--include-path <replaceable>path</replaceable></arg>

        <arg>--output-dir <replaceable>dir</replaceable></arg>

        <arg>--formats <replaceable>formats</replaceable></arg>

        <arg>--java-opts <replaceable>java-options</replaceable></arg>

        <arg>--max-iteration <replaceable>limit</replaceable></arg>

        <arg>--max-recursion <replaceable>limit</replaceable></arg>

        <arg>--nthread <replaceable>number</replaceable></arg>

        <arg>--no-disable-escaping | --disable-escaping</arg>

        <arg>--logging <replaceable>string</replaceable></arg>

        <arg>--log-file <replaceable>file</replaceable></arg>

        <arg>--warnings <replaceable>flag</replaceable></arg>

        <arg>-v | --no-verbose | --verbose</arg>

        <arg>-h | --no-help | --help</arg>

        <arg choice="opt"
        rep="repeat"><replaceable>template</replaceable></arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc</command> command will compile a collection of
      pan language templates into a set of machine configuration files. This
      command, with its reorganized and simplified options, replaces the older
      <command>panc</command> command.</para>

      <variablelist>
        <varlistentry>
          <term><option>--no-debug, --debug</option></term>

          <listitem>
            <para>Enable or disable all debugging. By default, debugging is
            turned off.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--debug-ns-include=<replaceable>regex</replaceable></option></term>

          <listitem>
            <para>Define a pattern to selectively enable the pan
            <function>debug</function> and <function>traceback</function>
            functions. Those functions will be enabled for templates where the
            template name matches one of the include regular expressions
            <emphasis>and</emphasis> does not match an exclude regular
            expression. This option may appear multiple times.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--debug-ns-exclude=<replaceable>regex</replaceable></option></term>

          <listitem>
            <para>Define a pattern to selectively disable the pan
            <function>debug</function> and <function>traceback</function>
            functions. Those functions will be disabled for templates where
            the template name matches one of the exclude regular expressions.
            This option may appear multiple times. Exclusion takes precedence
            over inclusion.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--initial-data=<replaceable>nlist-dml</replaceable></option></term>

          <listitem>
            <para>A DML expression that evaluates to an nlist. This value will
            be used as the starting nlist for all object templates. This is a
            convenient mechanism for injecting build numbers and other
            metadata in the profiles.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--include-path=<replaceable>path</replaceable></option></term>

          <listitem>
            <para>Defines the source directories to search when looking for
            templates. The value must be a list of absolute directories
            delimited by the platform's path separator. If this is not
            specified, the current working directory is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--output-dir=<replaceable>dir</replaceable></option></term>

          <listitem>
            <para>Set where the machine configuration files will be written.
            If this option is not specified, then the current working
            directory is used by default.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--formats=<replaceable>formats</replaceable></option></term>

          <listitem>
            <para>A comma separated list of desired output formats. Allowed
            values are "pan", "pan.gz", "xml", "xml.gz", "json", "json.gz",
            "txt", "dep" and "dot". The default is value is "pan,dep".</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--java-opts=<replaceable>string</replaceable></option></term>

          <listitem>
            <para>List of options to use when starting the java virtual
            machine. These are passed directly to the <command>java</command>
            command and must be valid. Multiple options can be specified by
            separating them with a space. When using multiple options, the
            full value must be enclosed in quotes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--max-iteration=<replaceable>limit</replaceable></option></term>

          <listitem>
            <para>Set the limit on the maximum number of permitted loop
            iterations. This is used to avoid infinite loops. The default
            value is 5000.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--max-recursion=<replaceable>limit</replaceable></option></term>

          <listitem>
            <para>Set the limit on the maximum number of permitted recursions.
            The default value is 10.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--nthread=<replaceable>number</replaceable></option></term>

          <listitem>
            <para>The number of threads to use for profile processing. The
            default value of zero will use a number equal to the number of CPU
            cores on the machine.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--no-disable-escaping,
          --disable-escaping</option></term>

          <listitem>
            <para>Enable or disable the escaping of path elements. The default
            value is to enable the escaping of path elements.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--logging=<replaceable>string</replaceable></option></term>

          <listitem>
            <para>Enable compiler logging; possible values are "all", "none",
            "include", "call", "task", and "memory". A log file must be
            specified with the <option>--log-file</option> option to capture
            the logging information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--log-file=<replaceable>file</replaceable></option></term>

          <listitem>
            <para>Set the name of the file to use to store logging
            information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--warnings=<replaceable>flag</replaceable></option></term>

          <listitem>
            <para>Possible values are "on", "off", and "fatal". The last value
            will turn all warnings into fatal errors.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v, --no-verbose, --verbose</option></term>

          <listitem>
            <para>At the end of a compilation, print run statistics including
            the numbers of files processed, total time, and memory used. The
            default is not to print these values.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-h, --no-help, --help</option></term>

          <listitem>
            <para>Print a short summary of command usage if requested. No
            other processing is done if this option is given.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <command>panc</command> command is just a wrapper script
      around the <command>java</command> command to simplify setting various
      options. The typical case is that the command is invoked without options
      and just a list of object templates as the arguments. Larger sets of
      templates will need to set the memory option for the Java Virtual
      Machine; this should be done through the <option>--java-opts</option>
      option.</para>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-annotations</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-annotations</refname>

      <refpurpose>process annotations in pan configuration files</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-annotations</command>

        <arg>--base-dir <replaceable>base-directory</replaceable></arg>

        <arg>--output-dir <replaceable>dir</replaceable></arg>

        <arg>--java-opts <replaceable>jvm-options</replaceable></arg>

        <arg>-v | --no-verbose | --verbose</arg>

        <arg>-h | --no-help | --help</arg>

        <arg choice="opt"
        rep="repeat"><replaceable>template</replaceable></arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-annotations</command> command will process the
      annotations contains within pan configuration files within the given
      base directory.</para>

      <variablelist>
        <varlistentry>
          <term><option>--base-dir=<replaceable>base-directory</replaceable></option></term>

          <listitem>
            <para>Defines a base directory containing all pan configuration
            files to process. The default is value is the current working
            directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--output-dir=<replaceable>dir</replaceable></option></term>

          <listitem>
            <para>Set where the annotation files will be written. If this
            option is not specified, then the current working directory is
            used by default.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--java-opts=<replaceable>string</replaceable></option></term>

          <listitem>
            <para>List of options to use when starting the java virtual
            machine. These are passed directly to the <command>java</command>
            command and must be valid. Multiple options can be specified by
            separating them with a space. When using multiple options, the
            full value must be enclosed in quotes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v, --no-verbose, --verbose</option></term>

          <listitem>
            <para>At the end of a compilation, print run statistics including
            the numbers of files processed, total time, and memory used. The
            default is not to print these values.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-h, --no-help, --help</option></term>

          <listitem>
            <para>Print a short summary of command usage if requested. No
            other processing is done if this option is given.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <command>panc-annotations</command> command is just a wrapper
      script around the <command>java</command> command to simplify setting
      various options.</para>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-build-stats.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-build-stats.pl</refname>

      <refpurpose>create a report of panc build statistics</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-build-stats.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-build-stats.pl</command> script will analyze a
      panc log file and report build statistics. The script takes the name of
      the log file as its only argument. If no argument is given or the
      <option>--help</option> option is used, a short usage message is
      printed. <emphasis>The log file must have been created with "task"
      logging enabled.</emphasis></para>

      <para>The script will extract the time required to execute, to set
      default values, to validate the configuration, to write the XML file,
      and to write a dependency file. It will also report the "build" time
      which is the time for executing, setting defaults, and validating an
      object file.</para>

      <para>The analysis is written to the standard output, but may be saved
      in a file using standard IO stream redirection. The format of the file
      is appropriate for the R statistical analysis package, but should be
      trivial to import into excel or any other analysis package.</para>
    </refsection>

    <refsection>
      <title>Example</title>

      <para>If the output from the command is written to the file
      <filename>build.txt</filename>, then the following R script will do a
      simple analysis of the results. This will provide statistical results on
      the various build phases and show histograms of the
      distributions.</para>

      <programlisting># R-script for simple analysis of build report
bstats &lt;- read.table("build.txt")
attach(bstats)
summary(bstats)
hist(build, nclass=20)
hist(execute, nclass=20)
hist(execute, nclass=20)
hist(defaults, nclass=20)
hist(validation, nclass=20)
hist(xml, nclass=20)
hist(dep, nclass=20)
detach(bstats)</programlisting>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-call-tree.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-call-tree.pl</refname>

      <refpurpose>create a graph of pan call tree</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-call-tree.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="opt"><option>--format=dot|hg</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-call-tree.pl</command> script will analyze a
      panc log file and create a graph of the pan call tree. One output file
      will be created for each object template. The script takes the name of
      the log file as its only argument. If no argument is given or the
      <option>--help</option> option is used, a short usage message is
      printed. <emphasis>The log file must have been created with "call"
      logging enabled.</emphasis></para>

      <para>The graphs are written in either "dot" or "hypergraph" format.
      <link xlink:href="http://www.graphviz.org/">Graphviz</link> can be used
      to visualize graphs written in dot format. <link
      xlink:href="http://hypergraph.sourceforge.net/">Hypergraph</link> can be
      used to visualize graphs written in hypergraph format. Note that all
      "includes" are shown in the graph; in particular unique and declaration
      templates will appear in the graph wherever they are referenced.</para>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-compile-stats.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-compile-stats.pl</refname>

      <refpurpose>create a report of panc compilation statistics</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-compile-stats.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-compile-stats.pl</command> script will analyze a
      panc log file and report compilation statistics. The script takes the
      name of the log file as its only argument. If no argument is given or
      the <option>--help</option> option is used, a short usage message is
      printed. <emphasis>The log file must have been created with "task"
      logging enabled.</emphasis></para>

      <para>The script will extract the start time of each compilation and its
      duration. This compilation is the time to parse a template file and
      create the internal representation of the template. The analysis is
      written to the standard output, but may be saved in a file using
      standard IO stream redirection. The format of the file is appropriate
      for the R statistical analysis package, but should be trivial to import
      into excel or any other analysis package.</para>
    </refsection>

    <refsection>
      <title>Example</title>

      <para>If the output from the command is written to the file
      <filename>compile.txt</filename>, then the following R script will
      create a "high-density" plot of the information. This graph shows a
      vertical line for each compilation, where the horizontal location is
      related to the start time and the height of the line the
      duration.</para>

      <programlisting># R-script for simple analysis of compile report
cstats &lt;- read.table("compile.txt")
attach(cstats)
plot(start/1000, duration, type="h", xlab="time (s)", ylab="duration (ms)")
detach(cstats)</programlisting>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-memory.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-memory.pl</refname>

      <refpurpose>create a report of panc memory utilization</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-memory.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-memory.pl</command> script will analyze a panc
      log file and report on the memory usage. The script takes the name of
      the log file as its only argument. If no argument is given or the
      <option>--help</option> option is used, a short usage message is
      printed. <emphasis>The log file must have been created with "memory"
      logging enabled.</emphasis></para>

      <para>The script will extract the heap memory usage of the compiler as a
      function of time. The memory use is reported in megabytes and the times
      are in milliseconds. Usually one will want to use this information in
      conjunction with the thread information to understand the memory use as
      it relates to general compiler activity. Note that java uses
      sophisticated memory management and garbage collection techniques;
      fluctuations in memory usage may not be directly related to the compiler
      activity at any instant in time.</para>
    </refsection>

    <refsection>
      <title>Example</title>

      <para>If the output from the command is written to the file
      <filename>memory.txt</filename>, then the following R script will create
      a plot of the memory utilization as a function of time.</para>

      <programlisting># R-script for simple analysis of memory report
mstats &lt;- read.table("memory.txt")
attach(mstats)
plot(time/1000, memory, xlab="time (s)", ylab="memory (MB)", type="l")
detach(mstats)</programlisting>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-profiling.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-profiling.pl</refname>

      <refpurpose>generate profiling information from panc log
      file</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-profiling.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="opt"><option>--usefunctions</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-profiling.pl</command> script will analyze a
      panc log file and report profiling information. The script takes the
      name of the log file as its first argument. The second argument
      determines if function call information will be included (flag=1) or not
      (flag=0). By default, the function call information is not included. If
      no argument is given or the <option>--help</option> option is used, a
      short usage message is printed. <emphasis>The log file must have been
      created with "call" logging enabled.</emphasis></para>

      <para>Two files are created for each object template: one with
      'top-down' profile information and the other with 'bottom-up'
      information.</para>

      <para>The top-down file contains a text representation of the call tree
      with each entry giving the total time spent in that template and any
      templates called from that template. At each level, one can use this to
      understand the relative time spent in a node and each direct
      descendant.</para>

      <para>The bottom-up file provides how much time is spent directly in
      each template (or function), ignoring any time spent in templates called
      from it. This allows one to see how much time is spent in each template
      regardless of how the template (or function) was called.</para>

      <para>All of the timing information is the "wall-clock" time, so other
      activity on the machine and the logging itself can influence the output.
      Nonetheless, the profiling information should be adequate to understand
      inefficient parts of a particular build.</para>
    </refsection>
  </refentry>

  <refentry>
    <info>
      <productnumber><?eval ${project.version}?></productnumber>

      <productname>panc</productname>

      <date><?eval ${buildTimestamp}?></date>
    </info>

    <refmeta>
      <refentrytitle>panc-threads.pl</refentrytitle>

      <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>panc-threads.pl</refname>

      <refpurpose>create a report of thread activity</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>panc-threads.pl</command>

        <arg choice="opt"><option>--help</option></arg>

        <arg choice="req">logfile</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>The <command>panc-threads.pl</command> script will analyze a panc
      log file and report on build activity per thread. The script takes the
      name of the log file as its only argument. If no argument is given or
      the <option>--help</option> option is used, a short usage message is
      printed. <emphasis>The log file must have been created with "task"
      logging enabled.</emphasis></para>

      <para>The script will give the start time of build activity on any
      particular thread and the ending time. This can be used to understand
      the build and thread activity in a particular compilation. The times are
      given in milliseconds relative to the first entry in the log
      file.</para>
    </refsection>

    <refsection>
      <title>Example</title>

      <para>If the output from the command is written to the file
      <filename>thread.txt</filename>, then the following R script will create
      a plot showing the duration of the activity on each thread.</para>

      <programlisting># R-script for simple analysis of thread report
tstats &lt;- read.table("threads.txt")
attach(tstats)
plot(stop/1000,thread, type="n", xlab="time (s)", ylab="thread ID")
segments(start/1000, thread, stop/1000, thread)
detach(tstats)</programlisting>
    </refsection>
  </refentry>
</appendix>
