<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>README</title>

  <subtitle>Version<?eval ${project.version}?></subtitle>

  <info>
    <author>
      <personname>Charles Loomis</personname>
    </author>

    <abstract>
      <para>This document describes important changes in the pan compiler
      between the current release major release (v8) and previous ones as well
      as identified migration issues. A detailed change log for the v8 series
      of compilers can be found at the end of the document.</para>
    </abstract>

    <productnumber><?eval ${project.version}?></productnumber>

    <date><?eval ${buildTimestamp}?></date>
  </info>

  <section>
    <title>Implementation Changes</title>

    <section>
      <title>Better Handling of <varname>SELF</varname></title>

      <para>Internally, the handling of <varname>SELF</varname> has been
      completely rewritten to reduce unnecessary cloning of values when using
      <varname>SELF</varname>. Moreover, specialized internal operands have
      been added to avoid unnecessary lookups in the variable symbol table
      when self is referenced. Overall, these changes should lead to faster
      execution and lower memory usage for statements involving
      <varname>SELF</varname>.</para>
    </section>

    <section>
      <title>Optimization</title>

      <para>This version of the compiler has begun to add some optimizations
      of statements and DML blocks. This first-level optimization involves the
      evaluation of compile-time constants to either remove branches in
      operator execution or to use specialized (and faster) versions of
      built-in functions. In many cases, this optimization allows stricter
      checking of syntax and validity checking of function arguments.
      Consequently, many errors that were caught only at run-time in previous
      compilers and now caught at compile-time.</para>
    </section>

    <section>
      <title>Read-Only Resources</title>

      <para>Internally, the resource objects (nlists and lists) have been
      extended to allow read-only versions of them. This will eventually allow
      resources to be cloned only when there is an attempt to modify them.
      Currently, global variables and values returned from the
      <function>value</function> function are cloned automatically. This is
      often unnecessary and leads to slower execution and greater memory
      usage. This is not yet used in the released version of the compiler, but
      will be phased in during minor releases of the panc v8 series.</para>
    </section>

    <section>
      <title>Remove Support for Binary Template Files</title>

      <para>The compiler no longer supports compilation of template files to
      an object file (as a java object serialization file). The overheads
      involved in the serialization process make recovering a template from
      the serialized file slower than recompiling the original template. Thus,
      this functionality provides no real benefit to the user. Removing this
      functionality also reduced the code base and simplified some
      methods.</para>
    </section>
  </section>

  <section>
    <title>Language Changes</title>

    <section>
      <title>Removed Keywords</title>

      <para>The keywords <literal>define</literal>, <literal>delete</literal>,
      <literal>description</literal>, and <literal>descro</literal> were
      deprecated in the panc v7 releases. Support for these deprecated
      keywords has been removed from the panc v8 releases. The
      <literal>define</literal> keyword can be simply removed from source
      templates. The <literal>description</literal> and
      <literal>descro</literal> clauses can be replaced with comments
      (starting with a pound sign and continuing until the end of the line) or
      with annotations. Statements using the <literal>delete</literal> keyword
      should be changed from:</para>

      <programlisting>delete '/my/path';</programlisting>

      <para>to an assignment to a <literal>null</literal> value:</para>

      <programlisting>'/my/path' = null;</programlisting>

      <para>This assignment has exactly the same effect as the
      <literal>delete</literal> statement. Note that the
      <function>delete</function> function is still permitted within a DML
      block.</para>
    </section>

    <section>
      <title>Removed Types</title>

      <para>The types <type>embed</type>, <type>stream</type>, and
      <type>fetch</type> are no longer supported in panc v8. There are
      currently no equivalents for these types in the panc language definition
      used in panc v8. If these types are being used, you must restructure
      your configuration to avoid them. Eventually, these types will be
      replaced with an XInclude type that will allow inclusion of external
      values in a more systematic and more standard way.</para>

      <para>The <type>link</type> type has also been removed as a separate
      type. The result is that the XML output will indicate that links have a
      <type>string</type> type and not a <type>link</type> type. This may have
      consequences for components that expressly use the NCM interface for
      links to retrieve values. However, as far as I can tell no component
      does so.</para>
    </section>

    <section>
      <title>Removed Functions</title>

      <para>The functions <function>hash</function> and
      <function>is_hash</function> have been removed. They were (unused)
      aliases for <function>nlist</function> and
      <function>is_nlist</function>, respectively.</para>
    </section>

    <section>
      <title>Deprecated Bareword Include</title>

      <para>An <literal>include</literal> statement may currently use a bare
      word to reference the template:</para>

      <programlisting>include my/template;</programlisting>

      <para>However, this complicates the pan parser because it must switch
      processing modes to allow this. Consequently, this form has been
      deprecated in the panc v8 series and will be removed in a future
      version. The preferred syntax is:</para>

      <programlisting>include { 'my/template' };</programlisting>

      <para>This is parsed more easily and when compiled is as efficient as
      the deprecated syntax. In the transition period, the braces are
      mandatory; once the support for the bareword include is removed, they
      will become optional. Support for the preferred syntax is already in the
      panc v7 series, so templates can already be changed to avoid the
      deprecated syntax.</para>
    </section>

    <section>
      <title>Using <literal>type</literal> Keyword for Binding
      Deprecated</title>

      <para>The ability to use the <literal>type</literal> keyword both for
      type definitions and for type binding creates an unnecessary branch
      point in the pan grammar. For efficiency and clarity, using the
      <literal>type</literal> keyword to bind a type to a path is deprecated
      in panc v8:</para>

      <programlisting>type 'my/path' = boolean;</programlisting>

      <para>For statements such as this, the <literal>type</literal> keyword
      should be replaced with <literal>bind</literal>:</para>

      <programlisting>bind 'my/path' = boolean;</programlisting>

      <para>When support for the deprecated grammar is removed, the processing
      within the pan parser can be simplified. The <literal>bind</literal>
      keyword is already supported in the panc v7 series, so these changes can
      already be made in existing templates.</para>
    </section>

    <section>
      <title>Lowercase Automatic Variables Deprecated</title>

      <para>Lowercase automatic variables have been deprecated in panc v8 and
      should be replaced by corresponding uppercase variable names. Removing
      support for lowercase variables brings usage of these variables in line
      with best practices regarding global variables. It also removes an
      ambiguity between the <literal>object</literal> keyword and the
      <varname>object</varname> variable name that will eventually simplify
      the pan grammar.</para>

      <para>The variables <varname>object</varname>, <varname>self</varname>,
      <varname>argc</varname>, <varname>argv</varname>, and
      <varname>loadpath</varname> should be replaced by
      <varname>OBJECT</varname>, <varname>SELF</varname>,
      <varname>ARGC</varname>, <varname>ARGV</varname>, and
      <varname>LOADPATH</varname>, respectively.</para>
    </section>

    <section>
      <title>External Path Syntax</title>

      <para>A new external path syntax can now be used; the new syntax allows
      object templates to be namespaced. The new syntax is:</para>

      <programlisting>my/object/tpl:/my/abs/path</programlisting>

      <para>showing a namespaced object template. The old external path syntax
      is still supported, but will be deprecated in a future release of the
      compiler. Please migrate to this new form.</para>
    </section>

    <section>
      <title>Namespaced Object Templates</title>

      <para>With the v8 versions of the compiler it is now possible to have
      namespaced object templates. This allows organization of the object
      templates in directory structures analogously to non-object templates.
      Values in namespaced object templates can only be referenced via the new
      external path syntax described in the previous section. The location of
      generated output files for namespaced object templates will be relative
      to the specified output directory with a path that mimics the given
      namespace. Be careful of using this feature as downstream components of
      the quattor toolkit (namely CCM) are not capable of locating namespaced
      object templates.</para>
    </section>

    <section>
      <title>Escaping Inside Literal Paths</title>

      <para>There are several situations in which a term in a path must be
      escaped; for example, when dealing with package names or with some
      device names that include slashes. Currently the only way to deal with
      such paths is to use the <function>escape</function> function, thus
      requiring use of a DML block. In many cases, this unnecessarily
      complicates a statement that could otherwise be written as a simple
      assignment statement, if the escaping were not necessary.</para>

      <para>The panc v8 series allows a literal path syntax, that
      automatically performs this escaping; simply surround the text to be
      escaped with braces. The statement:</para>

      <programlisting>'/my/complex/{a/b}/path' = 'OK';</programlisting>

      <para>will produce exactly the same result as:</para>

      <programlisting>'my/complex' = nlist(escape('a/b'), nlist('path', 'OK'));</programlisting>

      <para>except that in the first case only the <literal>a/b</literal>
      child is affected; the second case would remove all other children of
      <literal>/my/complex</literal>. Testing for and preserving the other
      children would further complicate the second statement.</para>

      <para>This syntax is a simple extension of the current syntax and has a
      couple of limitations: the escaped values may not be nested and braces
      themselves cannot be escaped.</para>
    </section>

    <section>
      <title>Restrictions on Structure Templates</title>

      <para>Currently the panc v7 series will allow structure templates to
      contain type declarations, function declarations, and variable
      assignments. All three of these change the global state when processing
      templates. As structure templates are always referenced from within a
      DML block, changing the global state should not be allowed, particularly
      being able to change global variables. Consequently, panc v8 forbids
      these statements from appearing in a structure template.</para>
    </section>

    <section>
      <title><varname>FUNCTION</varname> Automatic Variable Added</title>

      <para>The <varname>FUNCTION</varname> variable has been added. It is a
      global, final variable that contains the name of the function currently
      being executed. It doesn't exist if there is no function on the call
      stack. It is intended primarily for debugging and error messages.</para>
    </section>

    <section>
      <title><literal>for</literal> Loop Added</title>

      <para>A <literal>for</literal> loop has been added to the language. It
      has the syntax:</para>

      <programlisting>for (initialization-dml; condition-dml; increment-dml) body-dml</programlisting>

      <para>and behaves as it does in most programming languages. As for all
      statements in pan the <literal>for</literal> loop returns a value. The
      return value is value of the last statement executed in the
      <replaceable>body-dml</replaceable> or if the
      <replaceable>body-dml</replaceable> was never executed, then the value
      of the last statement in the
      <replaceable>initialization-dml</replaceable>.</para>
    </section>
  </section>

  <section>
    <title>Built-In Functions</title>

    <para>There are several new or changed built-in functions.</para>

    <itemizedlist>
      <listitem>
        <para><function>format</function>: Provides printf-like capabilities,
        allowing a string to be formatted according to a format string and
        list of values. The permitted formatting directives follow those
        available in Java.</para>
      </listitem>

      <listitem>
        <para><function>is_defined(a)</function>,
        <function>is_boolean(a)</function>, etc.: If these functions have a
        single variable reference as an argument, they will now return
        <literal>false</literal> if that variable does not exist. Currently,
        the processing will abort with an error. This essentially does an
        implicit <varname>if_exists</varname> call, allowing many conditional
        expressions to be simplified.</para>
      </listitem>

      <listitem>
        <para>String manipulation functions: There are now new string
        manipulation functions: <function>to_lowercase</function>,
        <function>to_uppercase</function>, <function>split</function>, and
        <function>replace</function>. These will allow less efficient and less
        general pan functions that perform similar functions to be
        replaced.</para>
      </listitem>

      <listitem>
        <para><function>to_string</function>: This function will now accept
        any element as an argument and produce a reasonable string
        representation of it. Previously, this function only accepted
        properties and complicated the use of debugging and error
        statements.</para>
      </listitem>

      <listitem>
        <para><function>path_exists</function>: This function will return true
        if the given absolute or external path exists. This function has been
        added to workaround an ambiguity in the <function>exists</function>
        function where the argument can be interpreted as a variable reference
        instead of using the value of the argument for a path.</para>
      </listitem>

      <listitem>
        <para><function>deprecated</function>: This function will print a
        deprecation warning to the console (stderr) if required by the
        deprecation level in effect for the compilation.</para>
      </listitem>
    </itemizedlist>

    <para>In general, these functions should be preferred to similar functions
    defined as pan functions; the built-in versions are more efficient.</para>
  </section>

  <section>
    <title>Client/Server Validation</title>

    <para>With this version of the pan compiler, it is now possible to have
    circular <emphasis>validation</emphasis> dependencies between machine
    profiles. This will allow better checking of the configuration for
    client/server situations. Note that circular <emphasis>build</emphasis>
    dependencies are still forbidden and will generate an error.</para>
  </section>

  <section>
    <title>Logging</title>

    <para>This release of the compiler includes the ability to log various
    activities of the pan compiler. The four types of logging are: "task",
    "call", "include", and "memory". The task logging can be used to extract
    information about how long the various processing phases last for a
    particular object template. The call logging allows the include graph to
    be reconstructed and to understand function calls; the "include" logging
    does not log function calls. The memory logging shows the memory usage
    during the template processing. The value "all" can be used to turn all
    logging on and "none", to turn all logging off. There are also a set of
    example perl scripts in the distribution that show how to analyze the
    logging information.</para>

    <para>Note that the stages of the build have changed slightly with the
    ability to treat circular validation dependencies. The stages one will see
    in the log files are: execute, defaults, valid1, valid2, xml, and dep.
    There is also a "build" stage that combines the execute and defaults
    stages.</para>
  </section>

  <section>
    <title>Miscellaneous Functionality</title>

    <para>A couple miscellaneous features have been added to the panc v8
    series:</para>

    <itemizedlist>
      <listitem>
        <para><varname>TEMPLATE</varname> automatic variable: This variable
        always includes the name of the template that invoked the running DML
        block. This will allow metadata embedded in the template name to be
        retrieved.</para>
      </listitem>

      <listitem>
        <para><varname>FUNCTION</varname> automatic variable: This variable is
        a global, final variable that contains the name of the function
        currently being executed. It doesn't exist if there is no function on
        the call stack. It is intended primarily for debugging and error
        messages.</para>
      </listitem>

      <listitem>
        <para>DOT output format: The configuration information can be written
        in the DOT output format. This format allows visualization of the
        configuration information as a graph. These files can be read by the
        Graphviz program.</para>
      </listitem>
    </itemizedlist>

    <para>In addition to these features, the release also includes a wider
    range of documentation, including a pan compiler manual, pan language
    manual, pan tutorial, and this README file. The documentation will be
    expanded and improved as the panc v8 series develops.</para>
  </section>

  <section>
    <title>Migration Issues</title>

    <section>
      <title>Global Variable Existence Tests</title>

      <para>Other than changes because of deprecated features, there is only
      one feature of panc v8 that requires some changes to pan code. This
      involves how global variables are handled and respond to the
      <function>exists</function> function. In panc v8, as soon as a variable
      statement starts execution it sets the value of the variable to
      <literal>undef</literal>. Previously, the value was left undefined. This
      causes a change in behavior when the <function>exists</function>
      function is applied to the same variable that is being set. That is the
      following statement will leave the variable <varname>X</varname> always
      <literal>true</literal> in panc v8:</para>

      <programlisting>variable X = exists(X);</programlisting>

      <para>Previously, the value could be either <literal>true</literal> or
      <literal>false</literal> depending on whether <varname>X</varname>
      existed before the statement executed.</para>

      <para>Problems arise when tri-state variables (using
      <literal>true</literal>, <literal>false</literal>, and
      <literal>undef</literal> as the three states) are used. Code
      like:</para>

      <programlisting>variable X ?=
  if (!exists(X)) {
    undef;
  } else {
    false;
  };</programlisting>

      <para>must be replaced with code like:</para>

      <programlisting>variable EXISTS = exists(X);
variable X ?=
  if (!EXISTS) {
    undef;
  } else {
    false;
  };</programlisting>

      <para>The second block of code will produce exactly the same results in
      both the v7 and v8 series of the compiler. Better still is to use
      tri-state variables that use <literal>null</literal>,
      <literal>true</literal>, and <literal>false</literal> as the three
      states. In this case, the <function>is_null</function> function can be
      used instead and the different behavior between versions can be avoided
      entirely.</para>
    </section>

    <section>
      <title><varname>SELF</varname> Usage</title>

      <para>The processing of <varname>SELF</varname> has been optimized in
      the latest version of the pan compiler. This unfortunately does have
      some user-visible consequences. Most notably setting a local variable to
      <varname>SELF</varname> <emphasis>will now create a copy</emphasis> of
      the value of <varname>SELF</varname>. In particular if
      <varname>SELF</varname> was a resource, then the local variable and
      <varname>SELF</varname> will contain two distinct copies and further
      modifications of the local variable will not affect
      <varname>SELF</varname>.</para>

      <programlisting># The path /result will be undef and NOT contain a child named 'orphan'!
'/result' = {
  x = SELF;
  x['orphan'] = 'alice';
  SELF;
};</programlisting>

      <para>Code that manipulates <varname>SELF</varname>, especially code
      that modifies <varname>SELF</varname>, should always reference
      <varname>SELF</varname> directly. This allows the compiler to avoid
      unnecessary copies and to optimize the code.</para>

      <programlisting># Code that has the expected behavior.  The path '/result' WILL have
# a child 'orphan' named 'alice'.
'/result' = {
  SELF['orphan'] = 'alice';
  SELF;
};</programlisting>

      <warning>
        <para>There is a case of this usage in the
        <function>filesystem_mod</function> function defined in the
        <literal>quattor/functions/filesystem template</literal>. Please be
        sure to use the latest version of this function in the quattor
        repository.</para>
      </warning>
    </section>

    <section>
      <title>Object Template Visible from Include Directories</title>

      <para>In a change from previous versions of the compiler, the compiled
      object templates <emphasis>must</emphasis> be visible from the specified
      include directories. In the past, it was possible to specify object
      templates that were not visible from the include directories on the
      command line. Doing this will generate an error with this version of the
      compiler. The more rigorous checking ensures that there are no
      ambiguities about what file is used for a given object.</para>
    </section>
  </section>

  <section>
    <title>Change Log</title>

    <section>
      <title>Version 9.0.0</title>

      <para>This release contains the following changes:</para>

      <itemizedlist>
        <listitem>
          <para>(SF Bug #3171788) Improve error message for format() function
          when there is a mismatch between given format string and
          arguments.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.4.5</title>

      <para>This release contains the following additional features:</para>

      <itemizedlist>
        <listitem>
          <para>(SF RFE #2674737) A prefix statement has been added to the pan
          language. This defines an absolute path that will be used to resolve
          all subsequent relative paths in assignment statements.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #3088575) Add a deprecation warning for old style
          external paths (//machine/path).</para>
        </listitem>

        <listitem>
          <para>(SF RFE #3088576) Add a compiler option to convert warnings to
          fatal errors.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.4.4</title>

      <para>This release contains the same features as 8.4.3, but contains
      updated documentation.</para>
    </section>

    <section>
      <title>Version 8.4.3</title>

      <para>This release is a production release containing:</para>

      <itemizedlist>
        <listitem>
          <para>A new maven plug-in that can be used to check the syntax of
          pan language files.</para>
        </listitem>

        <listitem>
          <para>A new ant task that just does the pan language syntax check,
          with fewer parameters than the standard task.</para>
        </listitem>
      </itemizedlist>

      <para>The code in the release has been slightly refactored to
      accommodate these changes and to reduce duplication of code.</para>
    </section>

    <section>
      <title>Version 8.4.2</title>

      <para>This is a production release containing the recent development
      features.</para>

      <itemizedlist>
        <listitem>
          <para>(SF Bug #3032206) The panc ant task did not correctly check
          for gzipped output files when the gzip flag was set. This caused the
          ant task to always recompile profiles when the gzip flag was set,
          regardless of whether the profiles were indeed outdated.</para>
        </listitem>

        <listitem>
          <para>(SF Bug #3024350) Ensure that en_US is always the default
          resource bundle for messages. (Fixes traceback when using other
          default locales.)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.4.1</title>

      <para>This is a production release containing the recent development
      features.</para>

      <itemizedlist>
        <listitem>
          <para>(SF Bug #3011393) Correct permissions on /usr/lib in generated
          rpm. Stripping the "execute" privilege caused CDB to fail. Also
          change the group name from "wheel" to "root".</para>
        </listitem>

        <listitem>
          <para>(SF Bug #3011392) Catch IllegalArgumentException generated by
          reading an outdated dependency file. Instead of failing with
          unhelpful error message, emit a warning and compile the associated
          profile.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.4.0</title>

      <para>This is a production release containing the recent development
      features.</para>

      <itemizedlist>
        <listitem>
          <para>(SF Bug #2991355) Fixes the index function documentation to
          correspond to the real behavior of the function. Unit tests added to
          validate the function's behavior.</para>
        </listitem>

        <listitem>
          <para>(SF Bug #2993548) Fixes a bug the panc script in which the
          check for the existence of the panc.jar file is inverted.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.3.1</title>

      <para><emphasis>This is a development release and not intended for
      production use. However it is a release candidate, so please do try the
      compiler on your production systems to see if any problems arise.
      Particular attention should be paid to dependency management.</emphasis>
      Feedback on the new features or any strange behavior is warmly
      welcomed.</para>

      <itemizedlist>
        <listitem>
          <para>(SF Bug #2950443) Fixes a bug in which a duplicate function
          definition did not provide the traceback to the second
          definition.</para>
        </listitem>

        <listitem>
          <para>(SF Bug #2953804) Fixes a bug in which references to SELF in
          the the DML block of an include statement caused a null pointer
          exception. Direct references to SELF will now throw a syntax
          exception; runtime references to SELF will cause an evaluation
          exception.</para>
        </listitem>

        <listitem>
          <para>The problems with indenting xml output from the pan language
          compiler has been worked around. With this release, the pan, xmldb,
          and annotation output files are all indented. This may cause
          spurious differences in the output files between the 8.3.1 and
          earlier releases of the compiler. Comparisons should be done
          ignoring whitespace.</para>
        </listitem>

        <listitem>
          <para>The annotation output files now contain information about the
          source location. This information can be used to link back to source
          locations for the definitions of variables, functions, and
          types.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.3.0</title>

      <para><emphasis>This is a development release and not intended for
      production use.</emphasis> Feedback on the new features or any strange
      behavior is warmly welcomed.</para>

      <itemizedlist>
        <listitem>
          <para>Annotation syntax has been expanded to include named
          annotations. The name and key values have been restricted from
          previous releases with the characters "+/" no longer being accepted.
          They must also not start with the string "xml", ignoring the case of
          the letters. This may create issues with backwards compatibility if
          annotations are used in your source files.</para>
        </listitem>

        <listitem>
          <para>The annotation information can be written to files using the
          <option>--annotation-dir</option> option. A template named
          "my/path/template" will have the annotation information written to
          the file <filename>my/path/template.annotation.xml</filename>
          relative to the given annotation directory.</para>
        </listitem>

        <listitem>
          <para>The compiler will now accept source files with the extension
          <filename>*.pan</filename> as well as <filename>*.tpl</filename>.
          The <filename>*.pan</filename> extension is now the preferred one.
          The next major release will remove support for the
          <filename>*.tpl</filename> files. (SF RFE#2860652)</para>
        </listitem>

        <listitem>
          <para>The format of the dependency file has changed to allow correct
          tracking of requested files that were absent as well as regular text
          files that are included into the configuration. <emphasis>The new
          format is not backward-compatible with previous releases!</emphasis>
          However, the associated ant task has been updated to work with the
          new format. After installing the new compiler, be sure to do a
          complete, fresh build of all of the profiles. (SF RFE #2855050, SF
          RFE #2718551)</para>
        </listitem>

        <listitem>
          <para>Internally, much of the compiler has been refactored in
          preparation for future changes, such as reading source information
          from something other than a file system and producing syntactic
          information to allow dedicated editors and debuggers. Although these
          changes should not be visible to an end user, subtle changes of
          behavior may have been introduced.</para>
        </listitem>

        <listitem>
          <para>The ant task also has a couple of patches contributed by
          Morgan Stanley. The first patch ensures that file descriptors are
          close reliably as soon as possible to avoid issues with the number
          of file descriptors open at one time. The second patch allows the
          build to be split into batches. The compiler is invoked separately
          for each batch. If object profiles are referenced from others, there
          is the possibility that individual profiles may be compiled several
          times. The ant task currently reports the results of each batch
          separately.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.11</title>

      <para>Although this version internally keeps track of dependencies from
      <function>exists</function> and <function>file_contents</function>
      function calls, these dependencies are not written to the dependency
      file in order to keep backward compatibility. A future release will
      update the dependency file format and make the
      <function>exists</function> and <function>file_contents</function>
      dependencies available to other tools.</para>

      <itemizedlist>
        <listitem>
          <para>(SF BUG #2909904) Error message for a missing file in
          file_contents() should provide the file name not the function
          name.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.10</title>

      <para>Although this version internally keeps track of dependencies from
      <function>exists</function> and <function>file_contents</function>
      function calls, these dependencies are not written to the dependency
      file in order to keep backward compatibility. A future release will
      update the dependency file format and make the
      <function>exists</function> and <function>file_contents</function>
      dependencies available to other tools.</para>

      <itemizedlist>
        <listitem>
          <para>(SF RFE #2871382) Correct a problem where binary data in
          strings could lead to invalid XML files being produced.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2718551) Implement a file_contents() function that
          will lookup the named file and then provide the contents as a
          string.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2806721) Request to add an <function>md5</function>
          function. A more general <function>digest</function> function was
          added that allows the digest algorithm to be specified.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2806732) Cross-reference path literal syntax
          (especially the path terms) in the documentation where valid nlist
          keys are required. This was added to the function descriptions of
          <function>create</function> and <function>nlist</function>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.9</title>

      <itemizedlist>
        <listitem>
          <para>(SF BUG #2860089) Incorrect handling of namespaced object
          templates in path syntax.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2821902) Updated SVN URL in
          <literal>Sources</literal> section.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.8</title>

      <itemizedlist>
        <listitem>
          <para>(SF RFE #2213843) The ant task now includes an option to
          exclude certain templates from the dependency calculation. The name
          of the option is <option>ignoreDependencyPattern</option> and is a
          regular expression matched against the namespaced template
          name.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2714229) The generated dependency file now
          recursively includes dependencies from referenced object files via
          the <function>value</function> function, either during the build or
          validation phases.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.7</title>

      <itemizedlist>
        <listitem>
          <para>(SF RFE #2577226) The <function>append</function> and
          <function>prepend</function> functions have been added to the pan
          language. This should eventually replace the
          <function>push</function> function in the QWG template
          distribution.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2602409) The <function>to_long</function>,
          <function>to_double</function>, and <function>to_boolean</function>
          function descriptions have been updated to correctly reflect their
          behavior.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.6</title>

      <itemizedlist>
        <listitem>
          <para>(SF BUG #2405657) When the defined log file cannot be opened,
          ensure that the message contains the full file name trying to opened
          and the error message.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2504034) The pan man page incorrectly implied that
          the template file names were required. They are in fact optional.
          The man page has been corrected.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2506902) Splice() description is unclear about
          side-effects for the arguments. There are no side-effects and the
          returned value is a (modified) copy of the input arguments. This has
          been clarified in the description.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2533401) When splitting a double quoted string across
          lines, any escape sequence at the beginning of the line was ignored.
          This has been fixed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.5</title>

      <itemizedlist>
        <listitem>
          <para>(SF BUG #2371882) Catch a StackOverflowError that results from
          the creation of a circular data structure. This now causes an
          EvaluationException with approximate location information and a hint
          that it is probably caused by a circular data structure.</para>
        </listitem>

        <listitem>
          <para>(SF BUG #2213918) Update the pan language manual to indicate
          that object templates can now be namespaced.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2381822) Add documentation of ant task attributes and
          nested elements to pan compiler manual.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2371275) Remove deprecated ant task attributes. The
          attributes <literal>objWriteEnabled</literal>,
          <literal>objLoadEnabled</literal>, and
          <literal>debugEnabled</literal> have been removed from the panc ant
          task. Build files should remove references to those
          attributes.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2351170) Add full path names for include logging. The
          full path names of included templates now appear in the generated
          log. This is useful in situations where the dependency file is not
          generated (e.g. when the profile does not compile).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.4</title>

      <itemizedlist>
        <listitem>
          <para>(SF RFE #2213785) Added support for annotations. The compiler
          will accept the annotation syntax, but currently does not provide a
          programmatic mechanism for extracting or processing the information
          within the annotation. A compiler option has been added
          (<option>--dump-annotations</option>) to allow processed annotations
          to be dumped to the standard output; by default, the information is
          not printed. The corresponding option for the panc ant task is
          <option>dumpAnnotations</option>.</para>
        </listitem>

        <listitem>
          <para>(SF RFE #2213794) The <function>debug</function> and
          <function>traceback</function> functions can now be selectively
          enabled/disabled. A set of include and exclude regular expressions
          can be specified via the command line or via parameters of the ant
          task. Those functions will be activated within any template whose
          name matches at least one include regular expression but matches
          none of the exclude regular expressions. The command line options
          are <option>--debug-include</option>,
          <option>--debug-exclude</option>, and the older
          <option>--debug</option>. For the panc ant task, the include/exclude
          regular expressions can be specified with embedded debug elements.
          You can have multiple debug elements. The debug element takes an
          <option>include</option> and/or an <option>exclude</option>
          option.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.3</title>

      <itemizedlist>
        <listitem>
          <para>(Trac bug #193) Fixed incorrect lookup of templates when
          handling <filename>*.del</filename> files.</para>
        </listitem>

        <listitem>
          <para>(Trac bug #194) Fixed a problem with the documentation where
          the final versions contained unprocessed xinclude directives.</para>
        </listitem>

        <listitem>
          <para>The <command>panc</command> man page has been added back to
          the release. This was inadvertently dropped in the v8.2.2
          release.</para>
        </listitem>

        <listitem>
          <para>Grammar now includes support for a prototype annotation
          syntax. The changes also make the annotation and comment information
          available to the parser. In this version, no additional processing
          of these is done.</para>
        </listitem>

        <listitem>
          <para>This release should be compatible with the latest version of
          CDB.</para>
        </listitem>

        <listitem>
          <para>The compiler now uses junit 4.5 and JavaCC 4.1
          internally.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.2</title>

      <itemizedlist>
        <listitem>
          <para>(Trac bug #192) The functions <function>exist</function> and
          <function>path_exists</function> should return
          <literal>false</literal> and not an error when a resources along the
          path cannot be dereferenced.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 8.2.1</title>

      <itemizedlist>
        <listitem>
          <para>(Trac bug #189) Output file names contain URL escapes when the
          parent path contains spaces (or other special characters).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</article>
