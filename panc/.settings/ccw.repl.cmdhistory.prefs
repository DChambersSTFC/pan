cmdhistory=["(ns example\\n  (\:import (java.io File))\\n  " "(ns example \\n  (\:import (java.io File)))\\n" "(println File/pathSeparator)\\n" "(str \\"^[\\" File.pathSeparator \\"]\\")" "(str \\"^[\\" File/pathSeparator \\"]\\")" "(str \\"^[\\" File/pathSeparator \\"]*\\")" "(re-pattern (str \\"^[\\" File/pathSeparator \\"]*\\"))" "(re-seq (re-pattern (str \\"^[\\" File/pathSeparator \\"]*\\")) \\"\\")" "(re-seq (re-pattern (str \\"^[\\" File/pathSeparator \\"]*\\")) \\"a\:b\:c\\")" "(re-seq (re-pattern (str \\"[^\\" File/pathSeparator \\"]*\\")) \\"a\:b\:c\\")" "(re-seq (re-pattern (str \\"[^\\" File/pathSeparator \\"]+\\")) \\"a\:b\:c\\")" "(re-seq (re-pattern (str \\"[^\\" File/pathSeparator \\"]+\\")) \\"a\:\:b\:c\\")" "(re-seq (re-pattern (str \\"[^\\" File/pathSeparator \\"]+\\")) nil\\n        )" "(use 'org.quattor.pan.pan-compiler)" "(doc instance?)" "(\:use 'clojure.test)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(apropos \\"test\\")" "(doc run-tests)" "(run-tests)" "(clojure.test/run-tests)" "(clojure.test/run-tests 'org.quattor.pan.cmd-option-test)" "(\:import 'org.quattor.pan.output.Panformatter)" "(\:import '(org.quattor.pan.output Textformatter XmlDBFormatter DotFormatter TxtFormatter)\\n         )" "(clojure.test/run-tests 'org.quattor.pan.cmd-option-test)" "(\:use org.quattor.pan.cmd-option)" "(\:use 'org.quattor.pan.cmd-option)" "(clojure.test/run-tests 'org.quattor.pan.cmd-option-test)" "(process \:formats \\"pan\\")" "(\:use 'org.quattor.pan.cmd-option)" "(process \:formats \\"pan\\")" "(\:use 'org.quattor.pan.cmd-option \:reload)" "(\:use 'org.quattor.pan.cmd-option)" "(process \:unknown \\"x\\")" "(org.quattor.pan.cmd-option/process \:unknown \\"x\\")" "(org.quattor.pan.cmd-option/process \:formats \\"pan\\")" "(org.quattor.pan.cmd-option/process \:formats \\"pan,dep\\")" "(\:use 'org.quattor.pan.cmd-option \:reload)" "(org.quattor.pan.cmd-option/process \:formats \\"pan,dep\\")" "(org.quattor.pan.cmd-option/process \:formats \\"dot\\")" "(org.quattor.pan.cmd-option/process \:formats \\"unknows\\")" "(\:use 'clojure.test)" "(clojure.test/run-tests 'org.quattor.pan.cmd-option-test)" "(use 'clojure.test)" "(use 'org.quattor.pan.cmd-option)" "(use 'org.quattor.pan.cmd-option-test)" "(run-tests)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use '[clojure.string \:only [split]])" "(split nil)" "(split nil \#\\"\\\\s\\")" "(split \\"\\" \#\\"\\\\s\\")" "(split \\"a   b\\" \#\\"\\\\s\\")" "(split \\"a   b\\" \#\\"\\\\s+\\")" "(split \\"\\" \#\\"\\\\s+\\")" "(split \\"\\" \#\\"\\\\s+\\" -1)" "(split \\"\\" \#\\"\\\\s+\\" 0)" "(map \#(not (blank? %)) (split \\"\\" \#\\"\\\\s+\\"))" "(use '[clojure.string \:only [split blank?]])" "(map \#(not (blank? %)) (split \\"\\" \#\\"\\\\s+\\"))" "(filter \#(not (blank? %)) (split \\"\\" \#\\"\\\\s+\\"))" "(filter (complement blank?) (split \\"\\" \#\\"\\\\s+\\"))" "(import 'java.util.regex.Pattern)" "(Pattern/quote \\"\\\\s+\\")" "(Pattern/quote \\"\\\\\\\\s+\\")" "(Pattern/quote \\"a\\")" "(re-pattern (Pattern/quote \\"\\\\\\\\s+\\"))" "(or nil \\"\\")" "(or \\" a \\" \\"\\")" "(or false \\"\\")" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option \:reload)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(use 'org.quattor.pan.cmd-option \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(doc split)" "(use 'clojure.string)" "(doc split)" "(use '[clojure.java.io \:only [as-file]])" "(as-file \\"/tmp/x\\")" "(as-file nil)" "(as-file \\"\\")" "(use 'org.quattor.pan.cmd-option)" "(absolute-file nil)" "(.absoluteFile (file \\"\\"))" "(use '[clojure.java.io \:only [as-file file]] \:reload\\n     )" "(.absoluteFile (file \\"\\"))" "(.getAbsoluteFile (file \\"\\"))" "(.getAbsoluteFile (file (System/getEnv \\"user.dir\\")))" "(.getAbsoluteFile (file (System/getProperty \\"user.dir\\")))" "(System/getProperty \\"user.dir\\")" "(use 'org.quattor.pan.cmd-option-utils)" "(use 'org.quattor.pan.cmd-option-utils \:reload)" "(use 'org.quattor.pan.cmd-option \:reload)" "(use 'org.quattor.pan.cmd-option-utils \:reload)" "(remove-ns 'org.quattor.pan.cmd-option)" "(remove-ns 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-utils \:reload)" "(remove-ns 'user)" "(use 'org.quattor.pan.cmd-option-utils \:reload)" "(create-ns 'user)" "(use 'clojure.test)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(remove-ns 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(use 'org.quattor.pan.cmd-option-utils-test)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'clojure.test \:only [run-tests])" "(use 'clojure.test)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(run-tests 'org.quattor.pan.cmd-option-utils)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(use 'org.quattor.pan.cmd-option-utils-test \:reload)" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(\= (\#\\"[abc]*\\" \#\\"[def]+\\") (\#\\"[abc]*\\" \#\\"[def]+\\"))" "(\= '(\#\\"[abc]*\\" \#\\"[def]+\\") '(\#\\"[abc]*\\" \#\\"[def]+\\"))" "(\=\= '(\#\\"[abc]*\\" \#\\"[def]+\\") '(\#\\"[abc]*\\" \#\\"[def]+\\"))" "(\= \#\\"[abc]\\" \#\\"[abc]\\")" "(run-tests 'org.quattor.pan.cmd-option-utils-test)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option-test)" "(use 'org.quattor.pan.cmd-option)" "(use 'org.quattor.pan.cmd-option-test)" "(run-tests 'org.quattor.pan.cmd-option-test)" "(doc deftest)" "(use 'org.quattor.pan.cmd-option)" "(process \:warnings \\"on\\")" "(use 'org.quattor.pan.cmd-option \:reload)" "(process \:warnings \\"on\\")" "(process \:warnings \\"off\\")" "(process \:warnings \\"fail\\")" "(doc cli)" "(use 'clojure.tools.cli)" "(doc cli)" "(use 'org.quattor.pan.pan-compiler)" "(pprint compiler-settings)" "(pprint default-compiler-settings)" "default-compiler-settings" "(pprint default-compiler-settings)" "(get-compiler-options {})" "(process-cli-args [\\"--debug\\" \\"--max-recursion\\" \\"1000\\"])" "(use 'org.quattor.pan.pan-compiler \:reload)" "(mapcat org.quattor.pan.cmd-option/process {\:verbose true})" "(mapcat \#(org.quattor.pan.cmd-option/process %1 %2) {\:verbose true})" "(mapcat (fn [[name value]] org.quattor.pan.cmd-option/process name value) {\:verbose true})" "(map identity {\:verbose true})" "(map (fn [[name value]] org.quattor.pan.cmd-option/process name value\\n       ))" "(mapcat (fn [[name value]] (org.quattor.pan.cmd-option/process name value)) {\:verbose true})" "(mapcat (fn [[name value]] (org.quattor.pan.cmd-option/process name value)) {\:verbose true \:debug true})" "(mapcat (fn [[name value]] (org.quattor.pan.cmd-option/process name value)) {\:verbose true \:debug true \:formats \\"pan.gz,dep\\"})" "(use 'org.quattor.pan.pan-compiler-test)" "(run-tests org.quattor.pan.pan-compiler-test)" "(run-tests org.quattor.pan.pan-compiler\\n           )" "(run-tests 'org.quattor.pan.pan-compiler-tests)" "(run-tests 'org.quattor.pan.pan-compiler-test)" "(use 'org.quattor.pan.cmd-option)" "(process [\:debug-exclude-patterns \\"org/quattor/pan/.*\\"])" "(use 'org.quattor.pan.cmd-option-utils)" "(absolute-file)" "(absolute-file nil)" "(absolute-file \\"\\")" "(absolute-file \\"alpha\\")" "(absolute-file \\"/tmp/something\\")" "(absolute-file \\"/dev/random\\")" "(use 'org.quattor.pan.pan-compiler \:reload)" "(absolute-file)" "(-main [\\"--verbose\\"])" "(-main \\"--verbose\\")" "(echo)" "(build-profiles {} [])" "(use 'org.quattor.pan.pan-compiler)" "(build-profiles {} [])" "(def results (build-profiles {} []))" "(.formatErrors results)" "(.formatStats results)" "(println (.formatStats results))" "(process-cli-args [])" "(pprint (process-cli-args []))" "(def options (first (process-cli-args [])))" "(pprint options)" "(def sources (map file \\"/tmp/test.pan\\"))" "(use '[clojure.java.io \:only [file]])" "(def sources (map file \\"/tmp/test.pan\\"))" "sources" "(println sources)" "(def sources (map file [\\"/tmp/test.pan\\"]))" "(println sources)" "(build-profiles options sources)" "*e*" "(compiler-error-and-exit *e*)" "(.class \#\\"[abc]\\")" "\#\\"[abc]\\"" "(instance? java.util.List [])" "(use 'clojure.pprint)" "(use 'org.quattor.pan.pan-compiler)" "(process-cli-args [\\"--verbose\\"])" "(def cli-options (first (process-cli-args [\\"--verbose\\" \\"test.pan\\"])))" "(pprint cli-options)" "(cli-options-to-settings cli-options)" "(cli-options-to-settings {})" "(require '[org.quattor.pan.cmd-option \:only [process]])" "(map process cli-options)" "(require '[org.quattor.pan.cmd-option \:as cmd-option \:reload])" "(require '(org.quattor.pan.cmd-option \:as cmd-option \:reload))" "(require '(org.quattor.pan.cmd-option \:as cmd-option\\n                                      ))" "(use '[org.quattor.pan.cmd-option \:only [process]])" "(map process cli-options)" "(pprint cli-options)" "(map \#((do (println %) (process %))) cli-options)" "(map println cli-options)" "(for [option cli-options]\\n  (println option)\\n  (println (process option)))" "(for [option cli-options]\\n  (do \\n    (println option)\\n    (println (process option))))" "(for [option cli-options]\\n  (do \\n    (println option)\\n    (println)))" "(process [\:help false])" "(process [\:output-dir nil])" "(process [\:include-path nil])" "(split-on-commas nil)" "(use '[org.quattor.pan.cmd-option-utils \:only [split-on-commas]])" "(split-on-commas nil)" "(use 'clojure.test)" "(run-tests org.quattor.pan.cmd-option-utils-test)" "(run-tests org.quattor.pan.cmd-option-utils)" "(use 'org.quattor.pan.cmd-option-utils)" "(use 'org.quattor.pan.cmd-option-utils-test)" "(run-tests org.quattor.pan.cmd-option-utils)" "(run-tests org.quattor.pan.cmd-option-utils-test)" "(\:import java.io.File)" "(instance? File nil)" "(instance? java.io.File nil)" "(use 'org.quattor.pan.parser.ast)" "(parse \\"test.pan\\")" "(use 'org.quattor.pan.parser.ast \:reload)" "(parse \\"test.pan\\")" "(use 'org.quattor.pan.pan-compiler \:reload)" "(use 'org.quattor.pan.parser.ast \:reload)" "(parse \\"test.pan\\")" "(println (parse \\"test.pan\\"))" "(.dump (parse \\"test.pan\\"))" "(dump. (parse \\"test.pan\\"))" "(.getSourceRange (parse \\"test.pan\\"))" "(dump. (parse \\"test.pan\\") \\"  \\")" "(.dump (parse \\"test.pan\\") \\"  \\")" "(use 'org.quattor.pan.parser.ast)" "(parse \\"test.pan\\")" "(.dump (parse \\"test.pan\\") \\" --> \\")" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(convert x)" "(def x (parse \\"test.pan\\"))" "(convert x)" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast \:reload)" "(def x (parse \\"test.pan\\"))" "(pprint (convert x))" "(use 'org.quattor.pan.parser.ast)" "(parse \\"test.pan\\")" "(def x (parse \\"test.pan\\"))" "(println x)" "(convert x)" "(use 'org.quattor.pan.parser.ast)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast)" "(def x (parse \\"test.pan\\"))" "(println x)" "(.dump x)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)" "(use 'org.quattor.pan.parser.ast \:reload)" "(convert x)"]
eclipse.preferences.version=1
