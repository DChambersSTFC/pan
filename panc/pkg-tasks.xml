<project>

	<description>packaging tasks</description>

	<property name="build.pkgs" location="${build}/pkgs" />
	<property name="build.sf" location="${build}/sourceforge" />

	<!-- **************************************************************************
	     Set a property with the version of the pan compiler.
	 ************************************************************************** -->

	<!-- Extracts the version from the compiler and sets the panc.version and 
	     panc.pkgname properties. -->
	<target name="version" depends="compile">

		<mkdir dir="${build.pkgs}" />

		<java classname="org.quattor.pan.Compiler"
		      outputproperty="panc.version"
		      errorproperty="panc.version.error">
			<classpath>
				<pathelement path="${build.java}" />
			</classpath>
		</java>

		<property name="panc.pkgname" value="panc-${panc.version}" />

		<echo message="Pan compiler version: ${panc.version}" />

	</target>


	<!-- test the OS to limit what package formats are built -->
	<target name="pkg.os.flags">

		<condition property="isMacOSX">
			<os name="Mac OS X" />
		</condition>

		<condition property="isLinux">
			<os name="Linux" />
		</condition>

	</target>

	<!-- **************************************************************************
	     Create a jar file for the compiler.
	 ************************************************************************** -->

	<target name="jar" depends="compile">

		<mkdir dir="${build.pkgs}" />

		<jar destfile="${build.pkgs}/panc.jar"
		     duplicate="fail"
		     index="true"
		     manifest="${src.java}/manifest">
			<fileset dir="${build.java}" includes="**/*.class" />
			<fileset dir="${build.java}" includes="**/*.xml" />
			<fileset dir="${build.java}" includes="**/*.properties" />
		</jar>
	</target>


	<!-- **************************************************************************
	     Create a source tar file.
	 ************************************************************************** -->

	<target name="src" depends="version">

		<property name="src" location="src" />
		<property name="src.scripts" location="scripts" />
		<property name="generated" location="generated" />
		<property name="grammar" location="grammar" />
		<property name="packaging" location="packaging" />
		<property name="tests" location="tests" />
		<property name="src.docs" location="docs" />

		<!-- Create the tar file. -->
		<tar destfile="${build.pkgs}/${panc.pkgname}-src.tar">
			<tarfileset dir="${basedir}" prefix="${panc.pkgname}" mode="644">
				<include name="**/*" />
				<exclude name="external/**/*" />
				<exclude name="generated/**/*" />
				<exclude name="build/**/*" />
				<exclude name="tests/Performance/**/*" />
			</tarfileset>
		</tar>

		<!-- Create both a gzip and bzip2 form of the tarball. -->
		<gzip src="${build.pkgs}/${panc.pkgname}-src.tar"
		      destfile="${build.pkgs}/${panc.pkgname}-src.tar.gz" />
		<bzip2 src="${build.pkgs}/${panc.pkgname}-src.tar"
		       destfile="${build.pkgs}/${panc.pkgname}-src.tar.bz2" />

	</target>


	<!-- **************************************************************************
	     Create a tar file.
	 ************************************************************************** -->

	<target name="tar" depends="version, jar, document">

		<!-- Create the tar file. -->
		<tar destfile="${build.pkgs}/${panc.pkgname}.tar">
			<tarfileset dir="${build.pkgs}"
			            includes="*.jar"
			            prefix="${panc.pkgname}/lib"
			            mode="644" />
			<tarfileset dir="${build.docs}"
			            includes="**/*"
			            prefix="${panc.pkgname}/doc"
			            mode="644" />
			<tarfileset dir="${build.man}"
			            includes="**/*"
			            prefix="${panc.pkgname}/man"
			            mode="644" />
			<tarfileset file="LICENSE"
			            prefix="${panc.pkgname}/doc"
			            mode="644" />
			<tarfileset dir="${src.scripts}"
			            includes="panc*"
			            prefix="${panc.pkgname}/bin"
			            mode="755" />
		</tar>

		<!-- Create both a gzip and bzip2 form of the tarball. -->
		<gzip src="${build.pkgs}/${panc.pkgname}.tar"
		      destfile="${build.pkgs}/${panc.pkgname}.tar.gz" />
		<bzip2 src="${build.pkgs}/${panc.pkgname}.tar"
		       destfile="${build.pkgs}/${panc.pkgname}.tar.bz2" />

	</target>


	<!-- **************************************************************************
	     Create a zip file.
	 ************************************************************************** -->

	<target name="zip" depends="version, jar, document">

		<zip destfile="${build.pkgs}/${panc.pkgname}.zip">
			<zipfileset dir="${build.pkgs}"
			            includes="*.jar"
			            prefix="${panc.pkgname}/lib"
			            filemode="644" />
			<zipfileset dir="${build.docs}"
			            includes="**/*"
			            prefix="${panc.pkgname}/doc"
			            filemode="644" />
			<zipfileset dir="${build.man}"
			            includes="**/*"
			            prefix="${panc.pkgname}/man"
			            filemode="644" />
			<zipfileset file="LICENSE"
			            prefix="${panc.pkgname}/doc"
			            filemode="644" />
			<zipfileset dir="${src.scripts}"
			            includes="panc*"
			            prefix="${panc.pkgname}/bin"
			            filemode="755" />
		</zip>

	</target>


	<!-- **************************************************************************
	     Organize files for SourceForge release.
	 ************************************************************************** -->

	<target name="sourceforge" depends="zip, jar, tar, src, dmg, rpm">

		<mkdir dir="${build.sf}" />

		<copy toDir="${build.sf}">
			<fileset dir="${build.pkgs}"
			         includes="*.zip, *.gz, *.bz, *.rpm, *.dmg" />
		</copy>

		<copy toDir="${build.sf}">
			<fileset dir="${build.docs}/pdf" includes="*.pdf" />
			<mapper type="glob" from="*.pdf" to="*-${panc.version}.pdf" />
		</copy>

		<copy toDir="${build.sf}">
			<fileset dir="${build.pkgs}" includes="panc.jar" />
			<mapper type="glob" from="*.jar" to="*-${panc.version}.jar" />
		</copy>

	</target>


	<!-- **************************************************************************
	     Create a dmg file.
	 ************************************************************************** -->

	<target name="dmg"
	        depends="pkg.os.flags, build, document, version"
	        if="isMacOSX">

		<!-- remove any previous builds -->
		<property name="tmp.dmg" location="${tmp}/dmg" />
		<delete includeEmptyDirs="true" dir="${tmp.dmg}" />
		<mkdir dir="${tmp.dmg}" />

		<!-- subdirectories within the dmg archive -->
		<property name="dmg.archive" value="${tmp.dmg}/Archive" />
		<property name="dmg.contents"
		          value="${tmp.dmg}/Archive/panc-${panc.version}.pkg/Contents" />
		<property name="dmg.resources" value="${dmg.contents}/Resources" />

		<filterset id="release.info">
			<filter token="SUMMARY" value="pan language compiler" />
			<filter token="NAME" value="panc" />
			<filter token="VERSION" value="${panc.version}" />
			<filter token="RELEASE" value="1" />
		</filterset>

		<copy toDir="${dmg.contents}" file="${packaging}/Info.plist">
			<filterset refid="release.info" />
		</copy>

		<copy toDir="${dmg.resources}" file="${packaging}/Description.plist">
			<filterset refid="release.info" />
		</copy>

		<copy toFile="${dmg.resources}/License.txt" file="LICENSE" />

		<copy toDir="${dmg.archive}/usr/lib">
			<fileset dir="${build.pkgs}" includes="*.jar" />
		</copy>

		<copy toDir="${dmg.archive}/usr/share/${panc.pkgname}/docs">
			<fileset dir="${build.docs}" includes="**/*" />
			<fileset file="LICENSE" />
		</copy>

		<copy toDir="${dmg.archive}/usr/share/man">
			<fileset dir="${build.man}" includes="**/*" />
		</copy>

		<copy toDir="${dmg.archive}/usr/bin">
			<fileset dir="${src.scripts}" includes="panc*" />
		</copy>

		<chmod dir="${dmg.archive}/usr/bin" perm="0655" includes="panc*" />

		<exec executable="mkbom" failonerror="true">
			<arg value="${dmg.archive}" />
			<arg value="${dmg.contents}/Archive.bom" />
		</exec>

		<exec executable="pax" failonerror="true">
			<arg value="-w" />
			<arg value="-z" />
			<arg value="-f" />
			<arg value="${dmg.contents}/Archive.pax.gz" />
			<arg value="-s" />
			<arg value="%^${dmg.archive}/%%" />
			<arg value="${dmg.archive}" />
		</exec>

		<delete includeEmptyDirs="true" dir="${dmg.archive}/usr" />

		<exec executable="hdiutil" failonerror="true">
			<arg value="create" />
			<arg line="-srcfolder ${dmg.archive}" />
			<arg line="-volname panc-${panc.version}" />
			<!--
			<arg line="-uid 99 -gid 99" />
			-->
			<arg line="-mode 0444" />
			<arg value="${build.pkgs}/${panc.pkgname}" />
		</exec>

		<exec executable="hdiutil" failonerror="true">
			<arg value="internet-enable" />
			<arg value="-yes" />
			<arg value="${build.pkgs}/${panc.pkgname}.dmg" />
		</exec>

	</target>


	<!-- **************************************************************************
	     Create an rpm file.
	 ************************************************************************** -->

	<target name="rpm" depends="pkg.os.flags, tar, version" if="isLinux">

		<property name="tmp.rpms" value="${tmp}/rpms" />

		<!-- remove any previous builds -->
		<delete includeEmptyDirs="true" dir="${tmp.rpms}" />

		<mkdir dir="${tmp.rpms}/SRPMS" />
		<mkdir dir="${tmp.rpms}/RPMS" />
		<mkdir dir="${tmp.rpms}/SOURCES" />
		<mkdir dir="${tmp.rpms}/SPECS" />
		<mkdir dir="${tmp.rpms}/BUILD" />
		<mkdir dir="${tmp.rpms}/TMP" />

		<copy toDir="${tmp.rpms}/SPECS" file="${packaging}/panc.spec">
			<filterset>
				<filter token="SUMMARY" value="pan language compiler" />
				<filter token="NAME" value="panc" />
				<filter token="VERSION" value="${panc.version}" />
				<filter token="RELEASE" value="1" />
				<filter token="BUILDROOT" value="${tmp.rpms}/TMP" />
				<filter token="TARFILE" value="${panc.pkgname}.tar.gz" />
			</filterset>
		</copy>

		<copy toDir="${tmp.rpms}/SOURCES"
		      file="${build.pkgs}/${panc.pkgname}.tar.gz" />

		<rpm specFile="panc.spec" topDir="${tmp.rpms}" failonerror="true" />

		<copy toDir="${build.pkgs}" flatten="true">
			<fileset dir="${tmp.rpms}/RPMS" includes="**/*.rpm" />
		</copy>

	</target>


	<!-- **************************************************************************
	     Create compiler packages in all applicable formats
	 ************************************************************************** -->

	<target name="package"
	        depends="src, javadoc, tar, zip, dmg, rpm, sourceforge"
	        description="create packages" />

</project>
